{
    "root": true,
    "plugins": [
        "@typescript-eslint",
        "promise"
    ],
    "parserOptions": {
        "project": "./tsconfig.json"
    },
    "extends": [
        "next/core-web-vitals",
        "eslint:recommended",
        "next",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime",
        "plugin:import/recommended",
        "plugin:import/typescript"
    ],
    "ignorePatterns": [
        "**/*.js"
    ],
    "rules": {
        "react/boolean-prop-naming": "error",
        "react/button-has-type": "off",
        "react/default-props-match-prop-types": "error",
        "react/destructuring-assignment": "error",
        "react/display-name": "error",
        "react/forbid-component-props": [
            "error",
            {
                "forbid": [
                    {
                        "propName": "className",
                        "allowedFor": [
                            "FormikField",
                            "Form",
                            "ErrorMessage",
                            "Html"
                        ],
                        "message": "Prop \"className\" is forbidden on Components"
                    }
                ]
            }
        ],
        "react/forbid-dom-props": "error",
        "react/forbid-elements": "error",
        "react/forbid-foreign-prop-types": "error",
        "react/forbid-prop-types": "error",
        "react/function-component-definition": [
            "error",
            {
                "namedComponents": "arrow-function",
                "unnamedComponents": "arrow-function"
            }
        ],
        "react/hook-use-state": "error",
        "react/iframe-missing-sandbox": "error",
        "react/no-access-state-in-setstate": "error",
        "react/no-adjacent-inline-elements": "error",
        "react/no-array-index-key": "error",
        "react/no-arrow-function-lifecycle": "error",
        "react/no-children-prop": "error",
        "react/no-danger": "error",
        "react/no-danger-with-children": "error",
        "react/no-deprecated": "error",
        "react/no-did-mount-set-state": "error",
        "react/no-did-update-set-state": "error",
        "react/no-direct-mutation-state": "error",
        "react/no-find-dom-node": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-is-mounted": "error",
        "react/no-multi-comp": "error",
        "react/no-namespace": "error",
        "react/no-redundant-should-component-update": "error",
        "react/no-render-return-value": "error",
        "react/no-set-state": "error",
        "react/no-string-refs": "error",
        "react/no-this-in-sfc": "error",
        "react/no-typos": "error",
        "react/no-unescaped-entities": "error",
        "react/no-unknown-property": "error",
        "react/no-unsafe": "error",
        "react/no-unstable-nested-components": "error",
        "react/no-unused-class-component-methods": "error",
        "react/no-unused-prop-types": "error",
        "react/no-unused-state": "error",
        "react/no-will-update-set-state": "error",
        "react/prefer-es6-class": "error",
        "react/prefer-exact-props": "error",
        "react/prefer-read-only-props": "error",
        "react/prefer-stateless-function": "error",
        "react/prop-types": "error",
        "react/react-in-jsx-scope": "off",
        "react/require-default-props": "off",
        "react/require-optimization": "error",
        "react/require-render-return": "error",
        "react/self-closing-comp": "error",
        "react/sort-comp": "error",
        "react/sort-prop-types": "error",
        "react/state-in-constructor": "error",
        "react/static-property-placement": "error",
        "react/style-prop-object": "error",
        "react/void-dom-elements-no-children": "error",
        // React Best Practices
        "react/jsx-boolean-value": "error",
        "react/jsx-filename-extension": [
            "error",
            {
                "extensions": [
                    ".jsx",
                    ".tsx"
                ]
            }
        ],
        "react/jsx-fragments": "error",
        "react/jsx-handler-names": "error",
        "react/jsx-key": "error",
        "react/jsx-no-comment-textnodes": "error",
        "react/jsx-no-constructed-context-values": "error",
        "react/jsx-no-duplicate-props": "error",
        "react/jsx-no-script-url": "error",
        "react/jsx-no-target-blank": "error",
        "react/jsx-no-undef": "error",
        "react/jsx-no-useless-fragment": [
            "error",
            {
                "allowExpressions": true
            }
        ],
        "react/jsx-uses-react": "error",
        "react/jsx-uses-vars": "error",
        // Style
        "jsx-quotes": "warn",
        "react/jsx-closing-bracket-location": "warn",
        "react/jsx-closing-tag-location": "warn",
        "react/jsx-curly-spacing": "warn",
        "react/jsx-equals-spacing": "warn",
        "react/jsx-first-prop-new-line": [
            "warn",
            "multiline"
        ],
        "react/jsx-indent-props": "warn",
        "react/jsx-max-props-per-line": [
            "warn",
            {
                "when": "always"
            }
        ],
        "react/jsx-newline": [
            "warn",
            {
                "prevent": true
            }
        ],
        "react/jsx-one-expression-per-line": [
            "warn",
            {
                "allow": "literal"
            }
        ],
        "react/jsx-pascal-case": "warn",
        "react/jsx-props-no-multi-spaces": "warn",
        "react/jsx-tag-spacing": "warn",
        "react/jsx-wrap-multilines": "warn",
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": "warn",
        // Other
        "react/jsx-indent": [
            "error",
            4
        ],
        "eol-last": "error",
        "eqeqeq": "error",
        "linebreak-style": "off",
        "no-await-in-loop": "error",
        "no-console": [
            "error",
            {
                "allow": [
                    "warn",
                    "error"
                ]
            }
        ],
        "no-trailing-spaces": "error",
        "require-await": "error",
        "import/newline-after-import": "warn",
        "import/order": [
            "warn",
            {
                "groups": [
                    [
                        "builtin",
                        "external"
                    ],
                    "internal",
                    [
                        "sibling",
                        "parent",
                        "index"
                    ]
                ],
                "pathGroups": [
                    {
                        "pattern": "@(components|configs|models|services|utils)/**",
                        "group": "internal"
                    }
                ],
                "pathGroupsExcludedImportTypes": [],
                "newlines-between": "always",
                "alphabetize": {
                    "order": "asc",
                    "caseInsensitive": true
                },
                "warnOnUnassignedImports": true
            }
        ],
        "promise/always-return": "error",
        "promise/no-return-wrap": "error",
        "promise/param-names": "error",
        "promise/catch-or-return": "error",
        "promise/no-native": "off",
        "promise/no-nesting": "warn",
        "promise/no-promise-in-callback": "warn",
        "promise/no-callback-in-promise": "warn",
        "promise/no-new-statics": "error",
        "promise/no-return-in-finally": "warn",
        "promise/valid-params": "warn",
        // Typescript
        "@typescript-eslint/array-type": [
            "error",
            {
                "default": "generic"
            }
        ],
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/member-delimiter-style": [
            "error"
        ],
        "@typescript-eslint/method-signature-style": "error",
        // "@typescript-eslint/naming-convention": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-floating-promises": [
            "error",
            {
                "ignoreIIFE": true
            }
        ],
        "@typescript-eslint/no-implicit-any-catch": "error",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-readonly": "error",
        // "@typescript-eslint/prefer-readonly-parameter-types": "error",
        "@typescript-eslint/typedef": "error",
        // Typescript Extension Rules
        "brace-style": "off",
        "@typescript-eslint/brace-style": [
            "warn",
            "stroustrup"
        ],
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": "error",
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": "error",
        "indent": "off",
        "@typescript-eslint/indent": [
            "error",
            4
        ],
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "error",
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": "error",
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": "error",
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": "error",
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": "error",
        // "no-extra-parens": "off",
        // "@typescript-eslint/no-extra-parens": [
        //     "error",
        //     "all",
        //     {
        //         "returnAssign": false,
        //         "ignoreJSX": "all",
        //         "nestedBinaryExpressions": false,
        //         "enforceForArrowConditionals": true
        //     }
        // ]
        "no-invalid-this": "off",
        "@typescript-eslint/no-invalid-this": "error",
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": "error",
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": "error",
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1,
                "maxEOF": 1,
                "maxBOF": 0
            }
        ],
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": "error",
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "argsIgnorePattern": "^_*$",
                "destructuredArrayIgnorePattern": "^_*$"
            }
        ],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": "error",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "object-curly-newline": [
            "warn",
            {
                "consistent": true
            }
        ],
        "object-curly-spacing": "off",
        "@typescript-eslint/object-curly-spacing": [
            "error",
            "always"
        ],
        "object-property-newline": [
            "warn",
            {
                "allowAllPropertiesOnSameLine": false
            }
        ],
        "padded-blocks": [
            "error",
            {
                "blocks": "never",
                "classes": "always",
                "switches": "never"
            }
        ],
        "quotes": "off",
        "@typescript-eslint/quotes": [
            "error",
            "double"
        ],
        "no-return-await": "off",
        "@typescript-eslint/return-await": "error",
        "semi": "off",
        "@typescript-eslint/semi": "error",
        "space-before-function-paren": "off",
        "@typescript-eslint/space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always"
            }
        ]
    }
}